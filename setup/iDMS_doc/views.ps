%!
%%BeginFeature: *Duplex True
true statusdict /setduplexmode get exec false statusdict /settumble get exec
%%EndFeature
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 9 FMDOCUMENT
0 0 /Helvetica-Oblique FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 1 /ZapfDingbats FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "59" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
72 746.06 540 756 R
7 X
0 K
V
0 10 Q
0 X
(Using the Multiple Viewnames functionality) 350.59 749.33 T
72 32.76 540 42.7 R
7 X
V
0 X
(Intel Confidential) 72 36.03 T
(5-59) 520 36.03 T
72 738 540 738 2 L
7 X
V
0.5 H
2 Z
0 X
N
540 54 72 54 2 L
7 X
V
0 X
N
72 90 540 720 R
7 X
V
72 693 540 702 C
72 693 540 702 R
7 X
0 K
V
72 697.97 578.95 703.94 R
0 X
V
0.5 H
0 Z
N
0 0 612 792 C
1 18 Q
0 X
0 K
(Using the Multiple V) 140.43 708 T
(iewnames functionality) 312.04 708 T
1 36 Q
( 5) 509.98 708 T
2 12 Q
-0.18 0.12 (The iDMS multiple views functionality allows a tool to specify only the data format) 126 635 B
0.12 (it desires to read, which allows reader tools to become independent of the speci\336c) 126 621 S
-0.17 0.12 (view names given to the formats. This chapter helps the tool to integrate with iDMS) 126 607 B
0.12 (so as to use this functionality) 126 593 S
0.12 (. The reader who desires to learn more on how the) 268.53 593 S
0.12 (multiple views as a whole work is referred to the iDMS administration guide.) 126 579 S
3 18 Q
(\340) 126 547 T
2 12 Q
0.12 (The multiple viewname functionality is) 147.6 547 S
4 F
0.12 (NOT) 344.5 547 S
2 F
0.12 ( available for writing cellviews.) 370.85 547 S
-0.32 0.12 (T) 147.6 533 B
-0.32 0.12 (ools that write cellviews) 154.21 533 B
4 F
-0.32 0.12 (MUST) 275.96 533 B
2 F
-0.32 0.12 ( in all cases know exactly the viewname of the) 311.09 533 B
0.12 (cellview they are writing.) 147.6 519 S
1 14 Q
(5.1  T) 72 485.67 T
(erminology) 106.74 485.67 T
2 12 Q
0.12 (In this section the terminology used is described.) 126 457 S
5 F
0.12 (V) 126 431 S
0.12 (iewtype) 132.56 431 S
2 F
0.12 (: The viewtype of a cellview is the data format of that \336le. Some examples) 170.04 431 S
-0.51 0.12 (of viewtypes therefore, are sch, alf, layout, schematic, etc. iDMS allows applications) 126 417 B
0.12 (that read data to specify only the viewtype.) 126 403 S
5 F
-0.9 0.12 (V) 126 377 B
-0.9 0.12 (iewname) 132.56 377 B
2 F
-0.9 0.12 (: The viewname of a cellview is the logical name provided for this cellview) 176.04 377 B
-0.9 0.12 (,) 534.66 377 B
-0.34 0.12 (which usually has something to do with the origin of the cellview) 126 363 B
-0.34 0.12 (, e.g: for a cellview) 443.46 363 B
0.12 (which is of viewtype sch, dif) 126 349 S
0.12 (ferent tools may call the viewname lssch or hdlsch,) 267.83 349 S
-0.13 0.12 (depending on which tool writes the particular sch \336le. In other words a viewname is) 126 335 B
-0.39 0.12 (an instantiation of a viewtype.) 126 321 B
5 F
-0.39 0.12 (Often a viewname is r) 275.8 321 B
-0.39 0.12 (eferr) 381.58 321 B
-0.39 0.12 (ed to simply as view) 405.05 321 B
-0.39 0.12 (.) 501.62 321 B
2 F
-0.39 0.12 ( iDMS) 504.74 321 B
0.12 (insists that applications specify the viewname when they) 126 307 S
4 F
0.12 (WRITE) 407.99 307 S
2 F
0.12 ( data. For reading) 449.91 307 S
0.12 (data applications may specify either the viewname or the viewtype.) 126 293 S
5 F
0.12 (Extension) 126 267 S
2 F
0.12 (: The extension of a cellview is the extension of the UNIX \336le, which) 174.38 267 S
0.12 (represents the cellview when it is checked out from the DMS.) 126 253 S
-0.26 0.12 (E.g: Consider a cell called ALU, which has 2 views lsssch and hdlsch. Each of these) 126 227 B
0.12 (views is of the viewtype sch. Now) 126 213 S
0.12 (, when a user checks out a cellview say \050ALU,) 294.06 213 S
0.12 (hdlsch\051 - the \336le will be in the corresponding working directory \050workdir\051 and this) 126 199 S
0.12 (\336le is called \050say\051 ALU.hsch. Thus for this cellview) 126 185 S
0.12 (, the viewtype is sch, the) 379.95 185 S
0.12 (viewname is hdlsch, and the extension is hsch.) 126 171 S
1 14 Q
(5.2  W) 72 141.67 T
(orking) 112.19 141.67 T
2 12 Q
0.12 (This section is a short overview of how iDMS implements the multiple views. The) 126 113 S
0.12 (intent is to give the application programmer a better understanding of the) 126 99 S
FMENDPAGE
%%EndPage: "59" 2
%%Page: "60" 2
612 792 0 FMBEGINPAGE
72 746.06 540 756 R
7 X
0 K
V
0 10 Q
0 X
(iDMS 2.1 Integration Guide) 72 749.33 T
72 738 540 738 2 L
7 X
V
0.5 H
2 Z
0 X
N
72 32.76 540 42.7 R
7 X
V
0 X
(5-60) 72 36.03 T
(Intel Confidential) 465.56 36.03 T
540 54 72 54 2 L
7 X
V
0 X
N
72 90 540 720 R
7 X
V
2 12 Q
0 X
0.12 (functionality available. iDMS has a global per project \336le pointed to by the) 126 712 S
0.12 (environment variable) 126 698 S
4 F
0.12 (IDMS_GLOBALFILE) 233.77 698 S
2 F
0.12 (, this \336le can have potentially several) 352.2 698 S
0.12 (tables which are useful to enforce methodology on the project. The two tables of) 126 684 S
0.12 (interest to us are the \322iDMSIntelDataFormatT) 126 670 S
0.12 (oNameT) 351.28 670 S
0.12 (able\323 and the) 393.13 670 S
0.12 (\322iDMSV) 126 656 S
0.12 (iewNameT) 169.31 656 S
0.12 (oExtT) 222.71 656 S
0.12 (able\323.) 252.46 656 S
1 14 Q
(5.2.1  iDMSIntelDataFormatT) 126 626.67 T
(oNameT) 313.9 626.67 T
(able) 368.07 626.67 T
2 12 Q
-0.78 0.12 (This table has two columns. The \336rst column consists of the viewtype, and the second) 126 598 B
-0.45 0.12 (column consists of a colon delimited ordered list of viewnames, which that viewtype) 126 584 B
0.12 (maps to.) 126 570 S
0.12 (E.g:) 126 544 S
6 10 Q
0.1 (Table iDMSIntelDataFormatToNameTable \050) 144 519.33 S
0.1 (############################################################) 144 495.33 S
0.1 (# The following table def) 144 471.33 S
0.1 (ines viewtype -> viewnames mapping) 296.42 471.33 S
0.1 (############################################################) 144 447.33 S
0.1 (# Format-name Switch_list) 144 423.33 S
0.1 (############################################################) 144 399.33 S
0.1 ( sch lsssch:hdlsch) 144 375.33 S
0.1 ( alf alf:alfp6:alfexp) 144 351.33 S
0.1 (############################################################) 144 327.33 S
0.1 (\051) 144 303.33 S
2 12 Q
-0.49 0.12 (The semantics of this for the application which would like to read a \336le say a.alf is as) 126 278 B
-0.62 0.12 (follows: When the application makes a call to iDMS asking for a cell \322a\323 of viewtype) 126 264 B
-0.44 0.12 (\322alf\323, iDMS will look at this table and then look for the cell \322a\323 with viewname \322alf\323) 126 250 B
0.12 (through the R) 126 236 S
0.12 (Wpath \050read/write path in dms.pth\051. If this cellview is not found, then) 192.86 236 S
0.12 (iDMS will look for the cell \322a\323 with viewname \322alfp6\323 through the R) 126 222 S
0.12 (Wpath entry) 466.48 222 S
-0.16 0.12 (corresponding to the calling tool with view alfp6. If this search is also unsuccessful,) 126 208 B
0.12 (then iDMS will look for cell \322a\323 with viewname \322alfexp\323.) 126 194 S
3 18 Q
(2) 126 162 T
2 12 Q
-0.74 0.12 (If this table is not present in the global \336le, or if the global \336le is not de\336ned, then) 147.6 162 B
0.12 (the default mapping is a 1:1 mapping between the viewtype and the viewname.) 147.6 148 S
0.12 (In our above example, this means that iDMS will look for cell \322a\323 with) 147.6 134 S
0.12 (view) 147.6 120 S
4 F
0.12 (name) 171.4 120 S
2 F
0.12 ( \322alf\323, when asked for cell \322a\323 with viewtype \322alf\323.) 199.85 120 S
FMENDPAGE
%%EndPage: "60" 3
%%Page: "61" 3
612 792 0 FMBEGINPAGE
72 746.06 540 756 R
7 X
0 K
V
0 10 Q
0 X
(Using the Multiple Viewnames functionality) 350.59 749.33 T
72 32.76 540 42.7 R
7 X
V
0 X
(Intel Confidential) 72 36.03 T
(5-61) 520 36.03 T
72 738 540 738 2 L
7 X
V
0.5 H
2 Z
0 X
N
540 54 72 54 2 L
7 X
V
0 X
N
72 90 540 720 R
7 X
V
1 14 Q
0 X
(5.2.2  iDMSV) 126 710.67 T
(iewNameT) 208.96 710.67 T
(oExtT) 277.13 710.67 T
(able) 314.97 710.67 T
2 12 Q
-0.51 0.12 (Similar to the above table - this table is also a 2 column table. However) 126 682 B
-0.51 0.12 (, each column) 469.9 682 B
-0.01 0.12 (of this table has exactly one entry) 126 668 B
-0.01 0.12 (. The \336rst column is the viewname and the second) 290.58 668 B
0.12 (column is the \336le extension that this name corresponds to. By using this table, the) 126 654 S
-0.48 0.12 (application is independent of the actual name of the \336le when it exists in the working) 126 640 B
0.12 (directories.) 126 626 S
0.12 (E.g:) 126 600 S
6 10 Q
0.1 (Table iDMSViewNameToExtTable\050) 144 575.33 S
0.1 (############################################################) 144 551.33 S
0.1 (# The following table def) 144 527.33 S
0.1 (ines format -> viewnames mapping) 296.42 527.33 S
0.1 (############################################################) 144 503.33 S
0.1 (# Viewname Extension) 144 479.33 S
0.1 (############################################################) 144 455.33 S
0.1 ( lsssch lsch) 144 431.33 S
0.1 ( hdlsch hsch) 144 407.33 S
0.1 ( alf alf) 144 383.33 S
0.1 ( alfp6 alfp) 144 359.33 S
0.1 ( alfexp alfe) 144 335.33 S
0.1 ( alftop alft) 144 311.33 S
0.1 ( alfbot alfb) 144 287.33 S
0.1 (############################################################) 144 263.33 S
0.1 (\051) 144 239.33 S
2 12 Q
-0.21 0.12 (Now to continue the above example - if an application wanted a cell named \322a\323, and) 126 214 B
-0.37 0.12 (a viewtype \322sch\323, then assuming that the cellview \050\322a\323, \322lsssch\323\051 was checked out to) 126 200 B
-0.06 0.12 (the user and the dms.pth pointed to the working directory) 126 186 B
-0.06 0.12 (. Then iDMS would return) 406.7 186 B
0.12 (to the application the fullpath name to the \336le \322a.lsch\323, The application would not) 126 172 S
0.12 (know either the viewname or the physical \336le extension.) 126 158 S
3 18 Q
(2) 126 126 T
2 12 Q
-0.4 0.12 (If this table is not speci\336ed - the default mapping is the idempotent function, i.e:) 147.6 126 B
0.12 (iDMS would look for the viewname as the extension. Thus if the) 147.6 112 S
0.12 (iDMSIntelDataFormatT) 147.6 98 S
0.12 (oNameT) 265.09 98 S
0.12 (able were de\336ned, but the) 306.93 98 S
FMENDPAGE
%%EndPage: "61" 4
%%Page: "62" 4
612 792 0 FMBEGINPAGE
72 746.06 540 756 R
7 X
0 K
V
0 10 Q
0 X
(iDMS 2.1 Integration Guide) 72 749.33 T
72 738 540 738 2 L
7 X
V
0.5 H
2 Z
0 X
N
72 32.76 540 42.7 R
7 X
V
0 X
(5-62) 72 36.03 T
(Intel Confidential) 465.56 36.03 T
540 54 72 54 2 L
7 X
V
0 X
N
72 90 540 720 R
7 X
V
2 12 Q
0 X
-0.83 0.12 (iDMSV) 147.6 712 B
-0.83 0.12 (iewNameT) 185.46 712 B
-0.83 0.12 (oExtT) 238.87 712 B
-0.83 0.12 (able were either not de\336ned or did not contain the lsssch) 268.61 712 B
0.12 (entry) 147.6 698 S
0.12 (, then an application looking for the cell \322a\323 viewtype \322sch\323 would get the) 172.07 698 S
0.12 (full path to the \336le a.lsssch.) 147.6 684 S
3 18 Q
(2) 126 652 T
2 12 Q
0.12 (The case both the above table are not de\336ned or do not contain the appropriate) 147.6 652 S
0.12 (entry) 147.6 638 S
0.12 (. Then, iDMS will look for the \336le as cellname.viewtype.) 172.07 638 S
1 14 Q
(5.3  Integration) 72 604.67 T
2 12 Q
0.12 (As will be seen from the above the application is totally independent of the tables/) 126 576 S
0.12 (extensions and any methodology chosen by the project will encapsulate the) 126 562 S
0.12 (application in a seamless manner) 126 548 S
0.12 (. In order for any application to take advantage of) 287.73 548 S
-0.34 0.12 (the above functionality it should call the following iDMS procedure when) 126 534 B
4 F
-0.34 0.12 (r) 489.07 534 B
-0.34 0.12 (eading) 494.3 534 B
2 F
-0.34 0.12 ( a) 529.01 534 B
0.12 (cellview) 126 520 S
0.12 (.) 166.81 520 S
1 14 Q
(5.3.1  C-interface) 126 490.67 T
6 10 Q
0.1 (int dmsCReadCellViewByViewType\050cellName, viewType, FilePath\051) 144 463.33 S
0.1 (char *cellName, *viewType;) 144 439.33 S
0.1 (char **f) 144 415.33 S
0.1 (ilePath;) 192.77 415.33 S
2 12 Q
0.12 (The ar) 126 390 S
0.12 (guments are the cellname, viewtype and a pointer which will return with the) 157.47 390 S
0.12 (value of the \336lepath. W) 126 376 S
0.12 (e should emphasize that the memory contents of the \336lepath) 240.72 376 S
-0.05 0.12 (are guaranteed until the next call to iDMS. If the application requires it for longer it) 126 362 B
0.12 (should copy it into some variable of their own.) 126 348 S
1 14 Q
(5.3.2  Mainsail-interface) 126 318.67 T
6 10 Q
0.1 (LONG INTEGER) 144 291.33 S
0.1 (PROCEDURE dmsMslReadCellViewByViewType\050) 144 267.33 S
0.1 ( USES STRING cellName;) 144 243.33 S
0.1 ( USES STRING viewType;) 144 219.33 S
0.1 ( PRODUCES STRING f) 144 195.33 S
0.1 (ilePath; \051;) 253.74 195.33 S
2 12 Q
0.12 (The ar) 126 170 S
0.12 (guments are the same as those for the C interface. The \336lePath as before is) 157.47 170 S
0.12 (available to the application until the next call to iDMS.) 126 156 S
FMENDPAGE
%%EndPage: "62" 5
%%Page: "63" 5
612 792 0 FMBEGINPAGE
72 746.06 540 756 R
7 X
0 K
V
0 10 Q
0 X
(Using the Multiple Viewnames functionality) 350.59 749.33 T
72 32.76 540 42.7 R
7 X
V
0 X
(Intel Confidential) 72 36.03 T
(5-63) 520 36.03 T
72 738 540 738 2 L
7 X
V
0.5 H
2 Z
0 X
N
540 54 72 54 2 L
7 X
V
0 X
N
72 90 540 720 R
7 X
V
1 14 Q
0 X
(5.3.3  SKILL-interface) 126 710.67 T
6 10 Q
0.1 (dmsSkillReadCellViewByViewType\050) 144 683.33 S
0.1 (t_cellName) 180 659.33 S
0.1 (t_viewType) 180 635.33 S
0.1 (\051 => t_pathName/nil) 144 611.33 S
2 12 Q
0.12 (The SKILL interface is dif) 126 586 S
0.12 (ferent in that the procedure returns the fullpathname if) 256.8 586 S
0.12 (successful. The ar) 126 572 S
0.12 (guments are as above.) 214.2 572 S
3 18 Q
(\340) 126 514 T
2 12 Q
-0.25 0.12 (For an application that would like to checkout the cellview) 147.6 514 B
-0.25 0.12 (. This interface is not) 433.78 514 B
0.12 (useful. The reason is that a checkout implies that the application will write the) 147.6 500 S
0.12 (cellview) 147.6 486 S
0.12 (. For this, iDMS requires that the application know exactly which cell) 188.41 486 S
0.12 (and viewname is being written. This interface is described in detail in the \336rst) 147.6 472 S
0.12 (chapter) 147.6 458 S
0.12 (.) 183.08 458 S
FMENDPAGE
%%EndPage: "63" 6
%%Page: "64" 6
612 792 0 FMBEGINPAGE
72 746.06 540 756 R
7 X
0 K
V
0 10 Q
0 X
(iDMS 2.1 Integration Guide) 72 749.33 T
72 738 540 738 2 L
7 X
V
0.5 H
2 Z
0 X
N
72 32.76 540 42.7 R
7 X
V
0 X
(5-64) 72 36.03 T
(Intel Confidential) 465.56 36.03 T
540 54 72 54 2 L
7 X
V
0 X
N
72 90 540 720 R
7 X
V
FMENDPAGE
%%EndPage: "64" 7
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 6 1
%%DocumentFonts: Helvetica-Oblique
%%+ Helvetica-Bold
%%+ Times-Roman
%%+ ZapfDingbats
%%+ Times-Bold
%%+ Times-Italic
%%+ Courier
